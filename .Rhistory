sigman = sqrt(N^2*var_summary + N*psiinv_summary*(psiinv_summary - 1)),
cin.l = round(pmax(N*psiinv_summary - 1.96*sqrt(N^2*var_summary + N*psiinv_summary*(psiinv_summary - 1)), N)),
cin.u = round(N*psiinv_summary + 1.96 *sqrt(N^2*var_summary + N*psiinv_summary*(psiinv_summary - 1))))
result <- Reduce(function(...) merge(..., by = c("listpair", "Var2")),
lapply(1:length(result), function(i)
reshape2::melt(result[[i]], value.name = names(result)[i], varnames = c("listpair", "Var2"))))
result <- separate(data = result, col = "Var2", into = c("model", "method"), sep = '\\.')
if(!TMLE){
result = result[result$method != "TMLE",]
}
object = list(result = result, N = N, ifvals = as.data.frame(ifvals), nuis = as.data.frame(nuis), nuistmle = as.data.frame(nuistmle))
class(object) = "popsize"
#print.popsize(result)
return(object)
}
}
object = popsize(List_matrix, funcname)
object = popsize(List_matrix, funcname = funcname)
result <- object$result
fig <- ggplot(result, aes(x = model, color = method)) +
#geom_line(aes(y = n, linetype = method)) +
geom_point(aes(y = n), position=position_dodge(0.35)) +
geom_errorbar(aes(ymin = cin.l, ymax = cin.u), width=.2, position=position_dodge(0.35)) +
facet_wrap(~listpair, labeller = label_both) +
scale_color_manual("Estimation method", values = c("PI" = "red", "DR" = "#E69F00", "TMLE" = "#56B4E9")) +
theme_bw() +
theme(legend.position = "bottom", text = element_text(size = tsize))
fig
List_matrix = simuldata(n = 6000, l = 3, categorical = TRUE, ep = -3)$List_matrix;object = popsize_cond(List_matrix, funcname = funcname, condvar = "catcov")
result <- object$result
fig <- ggplot(result, aes(x = condvar, color = method)) +
#geom_line(aes(y = n, linetype = method)) +
geom_point(aes(y = n), position=position_dodge(0.35)) +
geom_errorbar(aes(ymin = cin.l, ymax = cin.u), width=.2, position=position_dodge(0.35)) +
facet_grid(listpair~model, labeller = label_both) +
scale_x_discrete(name = "conditional variable (number of observations)", breaks = c(N$condvar), labels = paste(N$condvar, " (", N$N, ')', sep = '')) +
scale_color_manual("Estimation method", values = c("PI" = "red", "DR" = "#E69F00", "TMLE" = "#56B4E9")) +
theme_bw() +
theme(legend.position = "bottom", text = element_text(size = tsize))
result
class(result)
ggplot(result, aes(x = condvar, color = method)) +
#geom_line(aes(y = n, linetype = method)) +
geom_point(aes(y = n), position=position_dodge(0.35)) +
geom_errorbar(aes(ymin = cin.l, ymax = cin.u), width=.2, position=position_dodge(0.35))
ggplot(result, aes(x = condvar, color = method)) +
#geom_line(aes(y = n, linetype = method)) +
geom_point(aes(y = n), position=position_dodge(0.35)) +
geom_errorbar(aes(ymin = cin.l, ymax = cin.u), width=.2, position=position_dodge(0.35)) +
facet_grid(listpair~model, labeller = label_both)
ggplot(result, aes(x = condvar, color = method)) +
#geom_line(aes(y = n, linetype = method)) +
geom_point(aes(y = n), position=position_dodge(0.35)) +
geom_errorbar(aes(ymin = cin.l, ymax = cin.u), width=.2, position=position_dodge(0.35)) +
facet_grid(listpair~model, labeller = label_both) +
scale_x_discrete(name = "conditional variable (number of observations)", breaks = c(N$condvar), labels = paste(N$condvar, " (", N$N, ')', sep = '')) +
scale_color_manual("Estimation method", values = c("PI" = "red", "DR" = "#E69F00", "TMLE" = "#56B4E9")) +
theme_bw()
names(object)
object$N
fig <- ggplot(result, aes(x = condvar, color = method)) +
#geom_line(aes(y = n, linetype = method)) +
geom_point(aes(y = n), position=position_dodge(0.35)) +
geom_errorbar(aes(ymin = cin.l, ymax = cin.u), width=.2, position=position_dodge(0.35)) +
facet_grid(listpair~model, labeller = label_both) +
scale_x_discrete(name = "conditional variable (number of observations)", breaks = c(N$condvar), labels = paste(N$condvar, " (", N$x, ')', sep = '')) +
scale_color_manual("Estimation method", values = c("PI" = "red", "DR" = "#E69F00", "TMLE" = "#56B4E9")) +
theme_bw() +
theme(legend.position = "bottom", text = element_text(size = tsize))
N <- object$N
fig <- ggplot(result, aes(x = condvar, color = method)) +
#geom_line(aes(y = n, linetype = method)) +
geom_point(aes(y = n), position=position_dodge(0.35)) +
geom_errorbar(aes(ymin = cin.l, ymax = cin.u), width=.2, position=position_dodge(0.35)) +
facet_grid(listpair~model, labeller = label_both) +
scale_x_discrete(name = "conditional variable (number of observations)", breaks = c(N$condvar), labels = paste(N$condvar, " (", N$x, ')', sep = '')) +
scale_color_manual("Estimation method", values = c("PI" = "red", "DR" = "#E69F00", "TMLE" = "#56B4E9")) +
theme_bw() +
theme(legend.position = "bottom", text = element_text(size = tsize))
fig
devtools::document()
#' @references van der Laan, M. J., Polley, E. C. and Hubbard, A. E. (2008) Super Learner, Statistical Applications of Genetics and Molecular Biology, 6, article 25.
#' @examples
#' data = matrix(sample(c(0,1), 2000, replace = TRUE), ncol = 2)
#' x = matrix(rnorm(nrow(data)*3, 2,1), nrow = nrow(data))
#' ss = sample(1:6, nrow(data), replace = TRUE)
#'
#' data = cbind(data, x, ss)
#' psin_estimate = popsize_cond(List_matrix = data, funcname = c("logit", "sl"), condvar = 'ss', nfolds = 2, twolist = FALSE, eps = 0.005)
#' #this returns the plug-in, the bias-corrected and the tmle estimate for the two models conditioned on column ss
#' @export
popsize_cond <- function(List_matrix, K = 2, filterrows = FALSE, funcname = c("rangerlogit"), condvar, nfolds = 2, eps = 0.005, TMLE = TRUE, ...){
l = ncol(List_matrix) - K
n = nrow(List_matrix)
stopifnot(!is.null(dim(List_matrix)))
stopifnot(!missing(condvar))
stopifnot(is.element(condvar, colnames(List_matrix)))
List_matrix = as.data.frame(List_matrix)
conforminglists = apply(List_matrix[,1:K], 2, function(col){return(setequal(col, c(0,1)))})
if(sum(conforminglists) < 2){
stop("Data is not in the required format or lists are degenerate.")
return(NULL)
}
if(sum(conforminglists) < K){
Message(cat("Lists ", which(conforminglists == FALSE), " are not in the required format."))
}
if(!missing(condvar)){
if(is.character(condvar)){
condvar = which(colnames(List_matrix) == condvar) - K
}
}
condvar_vec = unique(List_matrix[, condvar + K])
object = NULL
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = try(popsize(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = nfolds, TMLE = TMLE, ...), silent = TRUE)
if("try-error" %in% class(est)){
next
}
if(!('DR' %in% est$result$method)){
next
}
if(is.null(object)){
object = lapply(est, function(x) cbind.data.frame(x, condvar = cvar))
}else{
object = Map("rbind", object, lapply(est, function(x) cbind.data.frame(x, condvar = cvar)))
}
}
if(!is.null(object)){
class(object) = "popsize_cond"
return(object)
}else{
print("Error in estimation for all subsets.")
return(0)
}
}
devtools::document()
devtools::document()
devtools::load_all()
library(profvis)
p1 = profvis({
set.seed(123)
simuldata(n = 7000, l = 2, ep = -1)$psi0
listdata = simuldata(n = 7000, l = 2, ep = -1)$List_matrix_xstar
head(listdata, 3)
result = popsize(List_matrix = listdata, funcname = c("logit", "gam", "mlogit", "sl"))
})
p1 = profvis({
set.seed(123)
simuldata(n = 7000, l = 2, ep = -1)$psi0
listdata = simuldata(n = 7000, l = 2, ep = -1)$List_matrix_xstar
head(listdata, 3)
result = popsize(List_matrix = listdata, funcname = c("logit", "gam", "mlogit"), nfolds = 2)
})
devtools::load_all()
library(profvis)
p1 = profvis({
set.seed(123)
simuldata(n = 7000, l = 2, ep = -1)$psi0
listdata = simuldata(n = 7000, l = 2, ep = -1)$List_matrix_xstar
head(listdata, 3)
result = popsize(List_matrix = listdata, funcname = c("logit", "gam", "mlogit"), nfolds = 2)
})
p1
devtools::load_all()
library(profvis)
p1 = profvis({
set.seed(123)
simuldata(n = 7000, l = 2, ep = -1)$psi0
listdata = simuldata(n = 7000, l = 2, ep = -1)$List_matrix_xstar
head(listdata, 3)
result = popsize(List_matrix = listdata, funcname = c("logit", "gam", "mlogit", "sl"), nfolds = 2)
})
library(profvis)
p1 = profvis({
set.seed(123)
simuldata(n = 7000, l = 2, ep = -1)$psi0
listdata = simuldata(n = 7000, l = 2, ep = -1)$List_matrix_xstar
head(listdata, 3)
result = popsize(List_matrix = listdata, funcname = c("logit", "gam", "mlogit"), nfolds = 5)
})
p1
min(NULL, 8)
devtools::load_all()
K
set.seed(123)
List_matrix = simuldata(n = 6000, l = 3, categorical = TRUE, ep = -2)$List_matrix_xstar
devtools::load_all()
set.seed(123)
List_matrix = simuldata(n = 6000, l = 3, categorical = TRUE, ep = -2)$List_matrix_xstar
K = 2; filterrows = FALSE; funcname = c("rangerlogit"); condvar; nfolds = 2; eps = 0.005; TMLE = TRUE; PLUGIN = TRUE
K = 2; filterrows = FALSE; funcname = c("rangerlogit"); condvar = 'catcov'; nfolds = 2; eps = 0.005; TMLE = TRUE; PLUGIN = TRUE
l = ncol(List_matrix) - K
n = nrow(List_matrix)
List_matrix = as.data.frame(List_matrix)
if(is.character(condvar)){
condvar = which(colnames(List_matrix) == condvar) - K
}
condvar_vec = unique(List_matrix[, condvar + K])
object = NULL
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = try(popsize(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = nfolds, TMLE = TMLE, ...), silent = TRUE)
if("try-error" %in% class(est)){
next
}
if(!('DR' %in% est$result$method)){
next
}
if(is.null(object)){
object = lapply(est, function(x) cbind.data.frame(x, condvar = cvar))
}else{
object = Map("rbind", object, lapply(est, function(x) cbind.data.frame(x, condvar = cvar)))
}
}
head(object)
object = NULL
cvar
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = try(popsize(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = nfolds, TMLE = TMLE, ...), silent = TRUE)
class(est)
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
head(List_matrixsub)
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = try(popsize(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = nfolds), silent = TRUE)
if("try-error" %in% class(est)){
next
}
if(!('DR' %in% est$result$method)){
next
}
if(is.null(object)){
object = lapply(est, function(x) cbind.data.frame(x, condvar = cvar))
}else{
object = Map("rbind", object, lapply(est, function(x) cbind.data.frame(x, condvar = cvar)))
}
}
class(object)
lapply(object, head)
devtools::load_all()
set.seed(123)
List_matrix = simuldata(n = 6000, l = 3, categorical = TRUE, ep = -2)$List_matrix_xstar
K = 2; filterrows = FALSE; funcname = c("rangerlogit"); condvar = 'catcov'; nfolds = 2; eps = 0.005; TMLE = TRUE; PLUGIN = TRUE
pp = popsize_cond(List_matrix, condvar = 'catcov')
class(pp)
lapply(pp, head)
devtools::document()
devtools::load_all()
library(profvis)
p1 = profvis({
set.seed(123)
simuldata(n = 7000, l = 2, ep = -1)$psi0
listdata = simuldata(n = 7000, l = 2, ep = -1)$List_matrix_xstar
head(listdata, 3)
result = popsize(List_matrix = listdata, funcname = c("logit", "gam", "mlogit"), nfolds = 5)
})
p1
library(drpop)
n = 3000
x = matrix(rnorm(n*3, 2,1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))
estim <- popsize(List_matrix = datacrc, func = c("gam", "rangerlogit"), nfolds = 2, eps = 0.01)
plotci(popsize = estim)$g1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%",
messages = FALSE,
warnings = FALSE
)
library(drpop)
n = 1000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))
options(warn = -1)
estim <- popsize(List_matrix = datacrc, func = c("gam"), nfolds = 2, K = 2)
# The population size estimates are obtained by
estim$n
# The corresponding variances are
estim$varn
## basic example code
library(drpop)
n = 1000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))[y1+y2 > 0, ]
options(warn = -1)
estim <- popsize(List_matrix = datacrc, func = c("gam"), nfolds = 2, K = 2)
# The population size estimates are obtained by
estim$n
# The corresponding variances are
estim$varn
## basic example code
library(drpop)
n = 1000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))[y1+y2 > 0, ]
options(warn = -1)
estim <- popsize(List_matrix = datacrc, func = c("gam"), nfolds = 2, K = 2)
# The population size estimates are 'n' and the standard deviations are 'sigman'
estim
## basic example code
library(drpop)
n = 3000
x = matrix(rnorm(n*3, 2,1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))[y1+y2>0,]
estim <- popsize(List_matrix = datacrc, func = c("gam", "rangerlogit"), nfolds = 2, eps = 0.01)
print(estim)
plotci(estim)
#result = melt(as.data.frame(estim), variable.name = "estimator", value.name = "population_size")
#ggplot(result, aes(x = population_size - n, fill = estimator, color = estimator)) +
#  geom_density(alpha = 0.4) +
#  xlab("Bias on n")
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)[y1+y2>0,]
result = popsize_cond(List_matrix = datacrc, condvar = 'ss')
fig = plotci(result)
fig + geom_hline(yintercept = table(ss), color = "brown", linetype = "dashed")
devtools::load_all()
devtools::install_github("mqnjqrid/drpop")
devtools::install_github("mqnjqrid/drpop")
devtools::install("C:/Users/manja/OneDrive/Documents/drpop")
library(drpop)
n = 1000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c(1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c(1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))[y1+y2 > 0, ]
options(warn = -1)
estim <- popsize(List_matrix = datacrc, func = c("gam"), nfolds = 2, K = 2)
# The population size estimates are 'n' and the standard deviations are 'sigman'
print(estim)
## basic example code
devtools::install("C:/Users/manja/OneDrive/Documents/drpop")
library(drpop)
n = 1000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c(1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c(1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))[y1+y2 > 0, ]
options(warn = -1)
estim <- popsize(List_matrix = datacrc, func = c("gam"), nfolds = 2, K = 2)
# The population size estimates are 'n' and the standard deviations are 'sigman'
print(estim)
## basic example code
devtools::install("C:/Users/manja/OneDrive/Documents/drpop")
library(drpop)
n = 1000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c(1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c(1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))[y1+y2 > 0, ]
options(warn = -1)
estim <- popsize(List_matrix = datacrc, func = c("gam"), nfolds = 2, K = 2)
# The population size estimates are 'n' and the standard deviations are 'sigman'
print(estim)
## basic example code
devtools::document()
devtools::document()
devtools
devtools::document()
library(ggmap)
library(ggplot2)
library(raster)
library(maptools)
library(maps)
library(viridis)
library(reshape2)
#remotes::install_github("tylermorganwall/rayshader")
library(rayshader)
library(tidyverse)
library(dplyr)
library(sf)
peru = st_read("C:/Users/manja/Dropbox/capture_recapture/data/Peru_killings/shape_files/DEPARTAMENTOS.shp", quiet = TRUE)
peru_reg = st_read("C:/Users/manja/Dropbox/capture_recapture/data/Peru_killings/shape_files/REGIONS.shp", quiet = TRUE)
library(scales) #for trans_new
modulus_trans <- function(lambda){
trans_new("modulus",
transform = function(y){
if(lambda != 0){
yt <- sign(y) * (((abs(y) + 1) ^ lambda - 1) / lambda)
} else {
yt = sign(y) * (log(abs(y) + 1))
}
return(yt)
},
inverse = function(yt){
if(lambda != 0){
y <- ((abs(yt) * lambda + 1)  ^ (1 / lambda) - 1) * sign(yt)
} else {
y <- (exp(abs(yt)) - 1) * sign(yt)
}
return(y)
}
)
}
charcols = function(charvec, nrow){
return(matrix(rep(unlist(charvec), nrow), nrow = nrow, byrow = TRUE))
}
slu_est_diff = output_n[,str_subset(colnames(output_n),"SLU_ranger")] -
output_n[,str_subset(colnames(output_n),"EST_ranger")]
peru_reg
sluestdiff
slu_est_diff
slu_est_diff
library(ggmap)
library(ggplot2)
library(raster)
library(maptools)
library(maps)
library(viridis)
library(reshape2)
library(rayshader)
library(tidyverse)
library(dplyr)
library(sf)
# first map of Peru -----------------------------------------------------
peru = st_read("data/shape_files/DEPARTAMENTOS.shp", quiet = TRUE)
peru_reg = st_read("/data/shape_files/REGIONS.shp", quiet = TRUE)
peru = st_read("data/shape_files/DEPARTAMENTOS.shp", quiet = TRUE)
dectools::load_all()
devtools::load_all()
devtools::document()
devtools::install_github("mqnjqrid/drpop")
??separate
devtools::document()
devtools::document()
devtools::document()
?popsize
??popsize
devtools::document()
nfolds = 2
N = 10
idfold = rep(1, N)
folds = 1
permutset = sample(1:N, N, replace = FALSE)
sbset = ((folds - 1)*ceiling(N/nfolds) + 1):(folds*ceiling(N/nfolds))
sbset = sbset[sbset <= N]
idfold[permutset[sbset]] = folds
if(nfolds == 1){
List1 = List_matrix
List2 = List1
sbset = 1:N
}else{
sbset = ((folds - 1)*ceiling(N/nfolds) + 1):(folds*ceiling(N/nfolds))
sbset = sbset[sbset <= N]
List1 = List_matrix[permutset[-sbset],]
List2 = List_matrix[permutset[sbset],]
idfold[permutset[sbset]] = folds
}
sbset = ((folds - 1)*ceiling(N/nfolds) + 1):(folds*ceiling(N/nfolds))
sbset = sbset[sbset <= N]
idfold[permutset[sbset]] = folds
idfold
permutset
sbset
permutset[sbset]
idfold[permutset[sbset]]
folds = 2
sbset = ((folds - 1)*ceiling(N/nfolds) + 1):(folds*ceiling(N/nfolds))
sbset = sbset[sbset <= N]
idfold[permutset[sbset]] = folds
idfold
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
