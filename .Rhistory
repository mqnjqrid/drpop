devtools::document()
devtools::document()
devtools::build_manual()
?tmle
citation(ggplot2)
citation("ggplot2")
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::build_manual()
devtools::build(binary = FALSE, manual = TRUE)
devtools::check()
test_that("Runs for single covariate with factor column", {
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE)
expect_false(class(ps) == "try-error")
expect_equal(sum(sapply(ps, anyNA)), 0)
})
devtools::load_all()
library(testthat)
test_that("Runs for single covariate with factor column", {
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE)
expect_false(class(ps) == "try-error")
expect_equal(sum(sapply(ps, anyNA)), 0)
})
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE);sum(sapply(ps, anyNA))
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE);sum(sapply(ps, anyNA))
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE);sum(sapply(ps, anyNA))
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE);sum(sapply(ps, anyNA))
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE);sum(sapply(ps, anyNA))
ps
sapply(ps, anyNA)
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE);sapply(ps, anyNA)
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE);sapply(ps, anyNA)
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE);sapply(ps, anyNA)
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE);sapply(ps, anyNA)
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE);sapply(ps, anyNA)
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE);sapply(ps, anyNA)
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE);sapply(ps, anyNA)
head(simuldata(n = 1000, l = 1, categorical = TRUE)$data)
devtools::check()
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, j = 1, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE);sapply(ps, anyNA)
devtools::load_all()
ps = try(popsize(data = simuldata(n = 1000, l = 1, categorical = TRUE)$data, j = 1, funcname = c("logit", "gam", "mlogit", "ranger")), silent = TRUE);sapply(ps, anyNA)
devtools::check()
devtools::load_all()
devtools::check()
ps = try(popsize(data = simuldata(n = 1000, l = 3, K = 3)$data, K = 3, funcname = c("gam", "logit")))
ps%result
ps%result
ps
devtools::load_all()
devtools::check()
devtools::build(binary = FALSE, manual = TRUE)
devtools::build_manual()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::build_manual()
devtools::build(binary = FALSE, manual = TRUE)
